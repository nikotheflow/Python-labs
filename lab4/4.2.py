#импорт библиотеки (только для создания случайных матриц)
import numpy as np

#вывод данных матриц
A = np.random.randint(-10, 10, (3, 3))
B = np.random.randint(-10, 10, (3, 1))
C = np.random.randint(-10, 10, (1, 3))
print("Матрица А:", "\n", A[0], "\n", A[1], "\n", A[2], "\n")
print("Матрица B:", "\n", B[0], "\n", B[1], "\n", B[2], "\n")
print("Матрица C:", "\n", C[0], "\n")

#нахождение коэффициентов числителя и знаменателя предаточной функции
d_k1 = -A[0][0]*A[1][1]*A[2][2]+A[0][0]*A[2][1]*A[1][2]+A[1][0]*A[2][2]*A[0][1]-A[1][0]*A[0][2]*A[2][1]-A[2][0]*A[0][1]*A[1][2]+A[0][2]*A[1][1]*A[2][0]
d_k2 = A[1][1]*A[2][2]-A[2][1]*A[1][2]+A[0][0]*A[2][2]+A[0][0]*A[1][1]-A[1][0]*A[0][1]-A[2][0]*A[0][2]
d_k3 = -A[0][0]-A[1][1]-A[2][2]

n_k1 = (B[0][0]*C[0][0]*(A[1][2]*A[2][1]-A[1][1]*A[2][2]) + B[0][0]*C[0][1]*(A[1][0]*A[2][2]-A[1][2]*A[2][1]) + B[0][0]*C[0][2]*(A[1][1]*A[2][0]-A[1][0]*A[2][1])
            + B[1][0]*C[0][0]*(A[0][1]*A[2][2]-A[0][1]*A[2][2]) + B[1][0]*C[0][1]*(A[0][2]*A[2][0]-A[2][2]*A[0][0]) + B[2][0]*C[0][2]*(A[0][0]*A[2][1]-A[0][1]*A[2][0])
            + B[2][0]*C[0][0]*(A[0][2]*A[2][2]-A[0][1]*A[1][2]) + B[2][0]*C[0][1]*(A[0][0]*A[1][2]-A[0][2]*A[1][0]) + B[2][0]*C[0][2]*(A[0][1]*A[1][0]-A[0][0]*A[1][1]))
n_k2 = (B[0][0]*C[0][0]*(A[1][1]+A[2][2]) - B[0][0]*C[0][1]*A[1][0] - B[0][0]*C[0][2]*A[2][0] - B[1][0]*C[0][0]*A[0][1] + B[1][0]*C[0][1]*(A[0][0]+A[2][2])
            - B[1][0]*C[0][2]*A[2][1] - B[2][0]*C[0][0]*A[0][2] - B[2][0]*C[0][1]*A[1][2] + B[2][0]*C[0][2]*(A[0][0]+A[1][1]))
n_k3 = ((-B[0][0]*C[0][0])+(-B[1][0]*C[0][1])+(-B[2][0]*C[0][2]))

#коэффициенты числителя
num_koef = []
num_koef.append(n_k1)
num_koef.append(n_k2)
num_koef.append(n_k3)

#коэффициенты знаменателя
den_koef = []
den_koef.append(d_k1)
den_koef.append(d_k2)
den_koef.append(d_k3)
den_koef.append(1)

#определение знаков коэффициентов числителя
signs = []
for i in range(3):
    if num_koef[i] > 0:
        signs.append("+")
    else:
        signs.append("-")
num = signs[2] + str(abs(num_koef[2])) + 's^2' + signs[1] + str(abs(num_koef[1]))+'s' + signs[0] + str(abs(num_koef[0]))

#определение знаков коэффициентов знаменателя  
signs = []
for i in range(2):
    if den_koef[i] > 0:
        signs.append("+")
    else:
        signs.append("-")
den = 's^3' + signs[0] + str(abs(den_koef[2]))+'s^2' + signs[1] +str(abs(den_koef[1]))+'s' + signs[0] +str(abs(den_koef[0]))

#вывод передаточной функции на экран
print ("Числитель передаточной функции:", num)
print ("Знаменатель передаточной функции:", den)
